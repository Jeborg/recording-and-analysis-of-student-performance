# Generated by Django 4.2.5 on 2024-04-15 19:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=20, verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'db_table': 'groups',
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=30, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=30, verbose_name='Отчество')),
                ('email', models.CharField(verbose_name='E-mail')),
                ('password', models.CharField(verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Информация о преподавателе',
                'verbose_name_plural': 'Информация о преподавателях',
                'db_table': 'professors',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('student', 'студент'), ('professor', 'преподаватель'), ('administrator', 'администратор')], verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=30, verbose_name='Имя')),
                ('middle_name', models.CharField(max_length=30, verbose_name='Отчество')),
                ('email', models.CharField(verbose_name='E-mail')),
                ('password', models.CharField(verbose_name='Пароль')),
                ('role_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.role', verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Информация о студенте',
                'verbose_name_plural': 'Информация о студентах',
                'db_table': 'students',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=100, verbose_name='Дисциплина')),
                ('teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.professor', verbose_name='ID преподавателя')),
            ],
            options={
                'verbose_name': 'Дисциплина',
                'verbose_name_plural': 'Дисциплины',
                'db_table': 'subjects',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Дата')),
                ('value', models.IntegerField(blank=True, verbose_name='Балл')),
                ('type', models.CharField(blank=True, choices=[('test', 'Тест'), ('exam', 'Экзамен'), ('attendance', 'Посещаемость')], verbose_name='Тип оценивания')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.student', verbose_name='ID студента')),
                ('subject_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.subject', verbose_name='ID предмета')),
            ],
            options={
                'verbose_name': 'Оценки',
                'verbose_name_plural': 'Оценки',
                'db_table': 'scores',
            },
        ),
        migrations.AddField(
            model_name='professor',
            name='role_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.role', verbose_name='Роль'),
        ),
        migrations.CreateModel(
            name='Group_user',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.student', verbose_name='ID пользователя')),
                ('group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.group', verbose_name='ID группы')),
            ],
            options={
                'verbose_name': 'группа пользователя',
                'verbose_name_plural': 'группа пользователей',
                'db_table': 'group_user',
            },
        ),
        migrations.CreateModel(
            name='Group_subject',
            fields=[
                ('group_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.group', verbose_name='ID группы')),
                ('subject_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.subject', verbose_name='ID преподавателя')),
            ],
            options={
                'verbose_name': 'Дисциплина группы',
                'verbose_name_plural': 'Дисциплина групп',
                'db_table': 'group_subjects',
            },
        ),
    ]
